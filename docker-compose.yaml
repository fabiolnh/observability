version: "3"

services:

  elasticsearch: # Logs (ElasticStack)
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.cors.enabled=true
      - http.cors.allow-origin="*"
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks: 
        - observability
   
  kibana: # Dashboards (ElasticStack)
    image: docker.elastic.co/kibana/kibana:7.13.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks: 
        - observability

  metricbeat: # Get CPU, Memory, System Processes, etc. (ElasticStack)
    image: docker.elastic.co/beats/metricbeat:7.13.0
    container_name: metricbeat
    user: root
    volumes:      
      - /var/run/docker.sock:/var/run/docker.sock
      - ./beats/metric/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml
    restart: on-failure
    networks: 
      - observability
    command: -e --strict.perms=false
    
  heartbeat: ## Asks to the service: It is alive? (ElasticStack)
    image: docker.elastic.co/beats/heartbeat:7.13.0
    container_name: heartbeat
    volumes:      
    - ./beats/heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
    environment: 
    - setup.kibana.host=kibana:5601
    networks: 
      - observability
    command: -e --strict.perms=false


  apm: ## Tracing (ElasticStack)
    image: docker.elastic.co/apm/apm-server-oss:7.13.0
    container_name: apm
    volumes:      
    - ./apm/apm-server.yml:/usr/share/apm-server/apm-server.yml
    ports:
      - "8200:8200"
    restart: on-failure
    networks: 
      - observability
    command: -e --strict.perms=false

  prometheus: ## Metric Collector (Other Stack)
    image: prom/prometheus
    container_name: prometheus
    depends_on:
      - cadvisor
    ports:
      - 9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus-and-grafana/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - observability

  grafana: # Dashboards (Other stack)
    image: grafana/grafana
    ports:
      - "3000:3000"
    container_name: grafana
    depends_on:
      - prometheus
    networks:
      - observability

  cadvisor: # To collect container metrics (Other stack)
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    user: root
    ports:
      - 8090:8090
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - observability

  demo:
    build:
      context: /app/
      dockerfile: Dockerfile
    image: demo:latest
    container_name: demo
    ports:
      - "8080:8080"
    networks:
      - observability

networks:
  observability:
    driver: bridge